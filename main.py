import os
import requests
import random
import feedparser
from datetime import datetime
from bs4 import BeautifulSoup

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL = os.getenv("CHANNEL_USERNAME")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
UNSPLASH_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

# --- –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ---
USED_LINKS_FILE = "used_links.txt"
USED_IMAGES_FILE = "used_images.txt"

# --- –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä ---
def is_political(text: str) -> bool:
    political_keywords = [
        "—É–∫—Ä–∞–∏–Ω–∞", "—É–∫—Ä–∞—ó–Ω–∞", "ukraine", "zelensky", "–∑–µ–ª–µ–Ω—Å–∫–∏–π", "–∫–∏–µ–≤", "–∫–∏—ó–≤",
        "–¥–æ–Ω–±–∞—Å—Å", "–¥–æ–Ω–µ—Ü–∫", "–ª—É–≥–∞–Ω—Å–∫", "–≤–æ–π–Ω–∞",
        "–≤–æ–µ–Ω–Ω—ã–µ", "–∫–æ–Ω—Ñ–ª–∏–∫—Ç", "—Å–∞–Ω–∫—Ü–∏–∏", "–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è", "—Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è"
    ]
    text_lower = text.lower()
    return any(word in text_lower for word in political_keywords)

# --- RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ---
RSS_FEEDS = [
    # AI –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    "https://www.technologyreview.com/topic/artificial-intelligence/feed",
    "https://deepmind.com/blog/feed/basic",
    "https://openai.com/blog/rss/",
    "http://ai.googleblog.com/feeds/posts/default?alt=rss",
    "https://towardsdatascience.com/feed",
    "https://bair.berkeley.edu/blog/feed.xml",
    "https://machinelearningmastery.com/blog/feed/",
    "https://www.aitrends.com/feed/",
    "https://www.datarobot.com/blog/feed/",
    "http://www.kdnuggets.com/feed",
    # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≥–µ–π–º–¥–µ–≤
    "https://habr.com/ru/rss/flows/develop/all/?fl=ru",
    "https://www.ixbt.com/export/news.rss",
    "https://kod.ru/feed",
    "https://www.cnews.ru/inc/rss/news.xml",
    "https://stackoverflow.blog/feed/",
    "https://dev.to/feed",
    "https://medium.com/feed/tag/programming",
    "https://techcrunch.com/feed/",
    "https://www.digitaltrends.com/feed/",
    "https://thenextweb.com/feed",
    "https://www.pcworld.com/index.rss",
    "https://hnrss.org/frontpage",
    "https://www.theverge.com/rss/index.xml",
    "https://feeds.arstechnica.com/arstechnica/index",
    "https://xakep.ru/feed/",
    "https://tproger.ru/rss",
    # –ì–µ–π–º–¥–µ–≤ / Unity / Godot
    "https://80.lv/feed/",
    "https://www.gamedeveloper.com/rss.xml",
    "https://godotengine.org/rss.xml",
    "http://gcup.ru/news/rss/",
    "http://gcup.ru/load/rss/",
    "http://gcup.ru/publ/rss/",
    "http://gcup.ru/blog/rss/",
    "http://gcup.ru/dir/rss/",
    "http://gcup.ru/photo/rss/",
    "http://gcup.ru/forum/0-0-0-37",
    # 3D / CAD
    "https://www.blendernation.com/feed/",
    "https://www.cgchannel.com/feed/",
    "https://www.cgtrader.com/blog.rss",
    "https://3ddd.ru/news/rss",
    "https://blogs.solidworks.com/solidworksblog/feed",
    "https://blender.org/feed/",
    # –û–±—â–µ–µ
    "https://www.rbc.ru/rss/"
]

# --- –£—Ç–∏–ª–∏—Ç—ã: —Å—Å—ã–ª–∫–∏ ---
def is_posted(link):
    if not os.path.exists(USED_LINKS_FILE):
        return False
    with open(USED_LINKS_FILE, "r", encoding="utf-8") as f:
        return link in f.read()

def mark_posted(link):
    with open(USED_LINKS_FILE, "a", encoding="utf-8") as f:
        f.write(link + "\n")

# --- –£—Ç–∏–ª–∏—Ç—ã: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
def is_image_used(url):
    if not os.path.exists(USED_IMAGES_FILE):
        return False
    with open(USED_IMAGES_FILE, "r", encoding="utf-8") as f:
        return url in f.read()

def mark_image_used(url):
    with open(USED_IMAGES_FILE, "a", encoding="utf-8") as f:
        f.write(url + "\n")

def extract_image_url(entry):
    soup = BeautifulSoup(entry.get("summary", ""), "html.parser")
    img_tag = soup.find("img")
    if img_tag and img_tag.get("src"):
        return img_tag.get("src")
    return None

def get_image_url(entry):
    url = extract_image_url(entry)
    if url and not is_image_used(url):
        mark_image_used(url)
        return url
    return None

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ---
def get_unique_news():
    for _ in range(10):
        feed = feedparser.parse(random.choice(RSS_FEEDS))
        for entry in feed.entries:
            title = entry.get("title", "")
            summary = entry.get("summary", "")
            link = entry.get("link", "")
            if is_posted(link):
                continue
            if is_political(title) or is_political(summary):
                print("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å:", title)
                continue
            return {
                "title": title,
                "summary": summary,
                "link": link,
                "source": feed.feed.title if hasattr(feed, "feed") else "–ò—Å—Ç–æ—á–Ω–∏–∫",
                "entry": entry
            }
    return None

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ ---
def stylize_post(news):
    prompt = f"""
–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π Telegram-–ø–æ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É:

üöÄ Google –¥–æ–±–∞–≤–∏–ª —Ä—É—á–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ —Å–≤–æ–µ–π –º–æ–¥–µ–ª–∏ AI
üìÖ 17 –∞–ø—Ä–µ–ª—è 2025–≥., MIT Technology Review
üîπ Google DeepMind –æ–±–Ω–æ–≤–∏–ª —Å–≤–æ—é –º–æ–¥–µ–ª—å AI Gemini –∏ –¥–æ–±–∞–≤–∏–ª —Ä—É—á–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–∞ "—Ä–∞–∑–º—ã—à–ª—è–µ—Ç" –≤ –æ—Ç–≤–µ—Ç–µ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–∑–≤–∞–Ω–∞ —ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –Ω–æ –ø—Ä–∏–∑–Ω–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: –º–æ–¥–µ–ª–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è —Å–∫–ª–æ–Ω–Ω—ã –∫ –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑—É, —Å–∂–∏–≥–∞—è –¥–µ–Ω—å–≥–∏ –∏ —ç–Ω–µ—Ä–≥–∏—é.
üí° –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, –∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –º–∏—Ä –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
ü§î –ö–∞–∫ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —Å—Ç–æ–∏—Ç –ª–∏ –¥–∞–≤–∞—Ç—å –º–æ–¥–µ–ª—è–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π?
üîó –°—Å—ã–ª–∫–∞: https://www.technologyreview.com/

---
–ù–æ–≤–æ—Å—Ç—å –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}
–û–ø–∏—Å–∞–Ω–∏–µ: {news['summary']}
–ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
–°—Å—ã–ª–∫–∞: {news['link']}

üî∏ –ú–∏–Ω–∏–º—É–º 4-6 —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞.  
üî∏ –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Å —ç–º–æ–¥–∑–∏ –∏ HTML —Ç–µ–≥–∞–º–∏ (<b>–∂–∏—Ä–Ω—ã–π</b>).
üî∏ –ü–∏—à–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–Ω—è–ª –¥–∞–∂–µ –Ω–æ–≤–∏—á–æ–∫.
üî∏ –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.
"""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [{"role": "user", "content": prompt}]
    }

    r = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
    try:
        return r.json()['choices'][0]['message']['content']
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", e)
        return f"<b>{news['title']}</b>\n{news['link']}"

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ ---
def post_to_telegram(text, image_url):
    url = f"https://api.telegram.org/bot{TOKEN}/sendPhoto"
    payload = {
        "chat_id": CHANNEL,
        "photo": image_url,
        "caption": text,
        "parse_mode": "HTML"
    }
    response = requests.post(url, data=payload)
    if response.status_code != 200:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", response.text)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    news = get_unique_news()
    if not news:
        print("üòê –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return

    print("üì∞ –ù–æ–≤–æ—Å—Ç—å:", news["title"])
    post_text = stylize_post(news)
    image_url = get_image_url(news["entry"])

    if image_url:
        post_to_telegram(post_text, image_url)
    else:
        print("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞")
        requests.post(
            f"https://api.telegram.org/bot{TOKEN}/sendMessage",
            data={"chat_id": CHANNEL, "text": post_text, "parse_mode": "HTML"}
        )

    mark_posted(news["link"])
    print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    main()
