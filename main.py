import os
import requests
import random
import feedparser
from bs4 import BeautifulSoup
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

# üìÅ –§–∞–π–ª—ã
USED_LINKS_FILE = "used_links.txt"
USED_IMAGES_FILE = "used_images.txt"

# üì° RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏
RSS_FEEDS = [
    # AI –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    "https://www.technologyreview.com/topic/artificial-intelligence/feed",
    "https://deepmind.com/blog/feed/basic",
    "https://openai.com/blog/rss/",
    "http://ai.googleblog.com/feeds/posts/default?alt=rss",
    "https://towardsdatascience.com/feed",
    "https://bair.berkeley.edu/blog/feed.xml",
    "https://machinelearningmastery.com/blog/feed/",
    "https://www.aitrends.com/feed/",
    "https://www.datarobot.com/blog/feed/",
    "http://www.kdnuggets.com/feed",

    # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≥–µ–π–º–¥–µ–≤
    "https://habr.com/ru/rss/flows/develop/all/?fl=ru",
    "https://www.ixbt.com/export/news.rss",
    "https://kod.ru/feed",
    "https://www.cnews.ru/inc/rss/news.xml",
    "https://stackoverflow.blog/feed/",
    "https://dev.to/feed",
    "https://medium.com/feed/tag/programming",
    "https://techcrunch.com/feed/",
    "https://www.digitaltrends.com/feed/",
    "https://thenextweb.com/feed",
    "https://www.pcworld.com/index.rss",
    "https://hnrss.org/frontpage",
    "https://www.theverge.com/rss/index.xml",
    "https://feeds.arstechnica.com/arstechnica/index",
    "https://xakep.ru/feed/",
    "https://tproger.ru/rss",

    # –ì–µ–π–º–¥–µ–≤ / Unity / Godot
    "https://80.lv/feed/",
    "https://www.gamedeveloper.com/rss.xml",
    "https://godotengine.org/rss.xml",

    # 3D / CAD
    "https://www.blendernation.com/feed/",
    "https://www.cgchannel.com/feed/",
    "https://www.cgtrader.com/blog.rss",
    "https://3ddd.ru/news/rss",
    "https://blogs.solidworks.com/solidworksblog/feed",
    "https://www.blender.org/feed/",

    # –û–±—â–µ–µ
    "https://www.rbc.ru/rss/"
]


# üö´ –§–∏–ª—å—Ç—Ä –ø–æ–ª–∏—Ç–∏–∫–∏
def is_political(text):
    keywords = ["—É–∫—Ä–∞–∏–Ω–∞", "–¥–æ–Ω–±–∞—Å—Å", "–∑–µ–ª–µ–Ω—Å–∫–∏–π", "—Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è", "—Å–∞–Ω–∫—Ü–∏–∏", "–≤–æ–π–Ω–∞"]
    return any(word in text.lower() for word in keywords)

# üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–º–µ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
def is_posted(link):
    if not os.path.exists(USED_LINKS_FILE):
        return False
    with open(USED_LINKS_FILE, "r", encoding="utf-8") as f:
        return link in f.read()

def mark_posted(link):
    with open(USED_LINKS_FILE, "a", encoding="utf-8") as f:
        f.write(link + "\n")

# üñº –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
def is_image_used(url):
    if not os.path.exists(USED_IMAGES_FILE):
        return False
    with open(USED_IMAGES_FILE, "r", encoding="utf-8") as f:
        return url in f.read()

def mark_image_used(url):
    with open(USED_IMAGES_FILE, "a", encoding="utf-8") as f:
        f.write(url + "\n")

def get_unsplash_image(query):
    url = f"https://api.unsplash.com/search/photos?query={query}&client_id={UNSPLASH_ACCESS_KEY}"
    res = requests.get(url).json()
    for item in res.get("results", []):
        img = item["urls"]["regular"]
        if not is_image_used(img):
            mark_image_used(img)
            return img
    return None

# üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek
def generate_post_text(title, summary, source, link):
    prompt = f"""
–°–¥–µ–ª–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ Telegram-—Å—Ç–∏–ª–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

üöÄ <b>{title}</b>
üìÖ {datetime.now().strftime('%d.%m.%Y')} ¬∑ {source}
üîπ –†–∞—Å—Å–∫–∞–∂–∏ —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî 6‚Äì10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
üí° –û–±—ä—è—Å–Ω–∏, —á–µ–º —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ
ü§î –ó–∞–≤–µ—Ä—à–∏ –≤–æ–ø—Ä–æ—Å–æ–º
üîó <a href="{link}">–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>
"""

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }

    try:
        r = requests.post("https://api.deepseek.com/v1/chat/completions", headers=headers, json=data)
        result = r.json()

        if 'choices' in result:
            return result['choices'][0]['message']['content']
        else:
            print("‚ö†Ô∏è DeepSeek –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ 'choices':", result)
            return None
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", e)
        return None

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
def post_to_telegram(text, image_url=None):
    if not text or len(text.strip()) < 20:
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    if image_url:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto",
            data={
                "chat_id": CHANNEL_USERNAME,
                "photo": image_url,
                "caption": text,
                "parse_mode": "HTML"
            }
        )
    else:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            data={
                "chat_id": CHANNEL_USERNAME,
                "text": text,
                "parse_mode": "HTML"
            }
        )

# üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
def get_news():
    for _ in range(10):
        feed = feedparser.parse(random.choice(RSS_FEEDS))
        for entry in feed.entries:
            title = entry.get("title", "")
            summary = entry.get("summary", "")
            link = entry.get("link", "")
            source = feed.feed.get("title", "–ò—Å—Ç–æ—á–Ω–∏–∫")

            if is_posted(link) or is_political(title + summary):
                continue
            if not summary or len(summary) < 40:
                continue

            return {
                "title": title,
                "summary": summary,
                "link": link,
                "source": source
            }
    return None

# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    news = get_news()
    if not news:
        print("üòê –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return

    print("üì∞ –ù–æ–≤–æ—Å—Ç—å:", news["title"])
    text = generate_post_text(news["title"], news["summary"], news["source"], news["link"])

    if not text or len(text.strip()) < 40:
        print("‚ùå –°–ª–∞–±—ã–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    image_url = get_unsplash_image("programming" if "code" in news["summary"].lower() else "technology")
    post_to_telegram(text, image_url)
    mark_posted(news["link"])
    print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

if __name__ == "__main__":
    main()
