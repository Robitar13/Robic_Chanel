import os
import random
import requests
import feedparser
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

# --- RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ ---
RSS_FEEDS = [
    "https://habr.com/ru/rss/flows/develop/all/?fl=ru",
    "https://www.ixbt.com/export/news.rss",
    "https://kod.ru/feed",
    "https://www.cnews.ru/inc/rss/news.xml",
    "https://stackoverflow.blog/feed/",
    "https://dev.to/feed",
    "https://medium.com/feed/tag/programming",
    "https://techcrunch.com/feed/",
    "https://www.digitaltrends.com/feed/",
    "https://thenextweb.com/feed",
    "https://www.pcworld.com/index.rss",
    "https://hnrss.org/frontpage",
    "https://www.theverge.com/rss/index.xml",
    "https://feeds.arstechnica.com/arstechnica/index",
    "https://www.blendernation.com/feed/",
    "https://80.lv/feed/",
    "https://www.cgchannel.com/feed/",
    "https://www.cgtrader.com/blog.rss",
    "https://3ddd.ru/news/rss",
    "https://www.rbc.ru/rss/"
]

# --- –≠–º–æ–¥–∑–∏ –∏ —Ö–µ—à—Ç–µ–≥–∏ ---
EMOJIS = ["üöÄ", "üí°", "üî•", "üß†", "üì¢", "üîß", "‚öôÔ∏è", "üåê", "üì±", "üéÆ"]
HASHTAGS = ["#–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "#3D", "#AI", "#–ù–æ–≤–æ—Å—Ç–∏", "#–ì—Ä–∞—Ñ–∏–∫–∞", "#–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–µ–π –Ω–æ–≤–æ—Å—Ç–∏ ---
def get_random_news():
    for _ in range(10):
        feed = feedparser.parse(random.choice(RSS_FEEDS))
        for entry in feed.entries:
            return {
                "title": entry.title,
                "summary": entry.summary,
                "link": entry.link,
                "source": feed.feed.title if hasattr(feed, "feed") else "–ò—Å—Ç–æ—á–Ω–∏–∫"
            }
    return None

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ---
def stylize_post(news):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    emoji = random.choice(EMOJIS)
    hashtags = " ".join(random.sample(HASHTAGS, 2))

    prompt = f"""
–¢—ã ‚Äî Telegram-–±–æ—Ç, –ø—É–±–ª–∏–∫—É—é—â–∏–π –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ —Å—Ç–∏–ª–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≥–∏–∫–æ–≤.

<b>–í–∞–∂–Ω–æ:</b>
‚Äì –ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.  
‚Äì –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ —Ç–µ—Ä–º–∏–Ω—ã, –∫—Ä–æ–º–µ –±—Ä–µ–Ω–¥–æ–≤—ã—Ö.  
‚Äì –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç: —ç–º–æ–¥–∑–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –¥–∞—Ç–∞, –≤—ã–≤–æ–¥.  
‚Äì –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ "—Ñ–∞–∫—Ç", –ø–∏—à–∏ –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫.  
‚Äì –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å —Ö–µ—à—Ç–µ–≥–∏ –∏ —Å—Å—ã–ª–∫—É.

–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}
–û–ø–∏—Å–∞–Ω–∏–µ: {news['summary']}
–°—Å—ã–ª–∫–∞: {news['link']}
–ò—Å—Ç–æ—á–Ω–∏–∫: {news['source']}
–î–∞—Ç–∞: {datetime.now().strftime("%d.%m.%Y")}

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –≤ HTML –¥–ª—è Telegram.
"""

    data = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [{"role": "user", "content": prompt}]
    }

    res = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
    try:
        result = res.json()
        if "choices" in result:
            return result['choices'][0]['message']['content']
        else:
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –±–µ–∑ choices:", result)
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç."
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", e)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
def get_image_url(query):
    search_terms = [
        query, f"{query} concept", f"{query} art", f"{query} idea",
        f"{query} tech", f"{query} future", f"{query} workspace"
    ]
    random.shuffle(search_terms)

    for term in search_terms:
        url = f"https://api.unsplash.com/search/photos?query={term}&client_id={UNSPLASH_ACCESS_KEY}"
        res = requests.get(url).json()
        results = res.get("results", [])
        if results:
            img = random.choice(results)["urls"]["regular"]
            return img
    return None

# --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram ---
def post_to_telegram(text, img_url):
    requests.post(
        f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto",
        data={
            "chat_id": CHANNEL_USERNAME,
            "photo": img_url,
            "caption": text,
            "parse_mode": "HTML"
        }
    )

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    news = get_random_news()
    if not news:
        print("üòê –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    print("üì∞ –ù–æ–≤–æ—Å—Ç—å:", news["title"])
    text = stylize_post(news)
    query = "3D modeling" if "3d" in news["summary"].lower() else "programming"
    img = get_image_url(query)

    if img:
        post_to_telegram(text, img)
        print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
    else:
        print("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    main()
