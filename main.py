import os
import time
import random
import requests
import feedparser
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env ---
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

# --- –°–ø–∏—Å–æ–∫ RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ---
RSS_FEEDS = [
    # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ IT
    "https://habr.com/ru/rss/flows/develop/all/?fl=ru",
    "https://www.ixbt.com/export/news.rss",
    "https://kod.ru/feed",
    "https://www.cnews.ru/inc/rss/news.xml",
    "https://stackoverflow.blog/feed/",
    "https://dev.to/feed",
    "https://medium.com/feed/tag/programming",
    "https://techcrunch.com/feed/",
    "https://www.digitaltrends.com/feed/",
    "https://thenextweb.com/feed",
    "https://www.pcworld.com/index.rss",
    "https://hnrss.org/frontpage",
    "https://www.theverge.com/rss/index.xml",
    "https://feeds.arstechnica.com/arstechnica/index",

    # 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    "https://www.blendernation.com/feed/",
    "https://80.lv/feed/",
    "https://www.cgchannel.com/feed/",
    "https://www.cgtrader.com/blog.rss",
    "https://3ddd.ru/news/rss",

    # –ù–æ–≤–æ—Å—Ç–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    "https://www.rbc.ru/rss/"
]


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞—Å—å –ª–∏ –Ω–æ–≤–æ—Å—Ç—å ---
def is_posted(link):
    if not os.path.exists("posted_links.txt"):
        return False
    with open("posted_links.txt", "r", encoding="utf-8") as file:
        posted = file.read().splitlines()
    return link in posted


# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ ---
def mark_as_posted(link):
    with open("posted_links.txt", "a", encoding="utf-8") as file:
        file.write(link + "\n")


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ ---
def is_image_used(image_url):
    if not os.path.exists("used_images.txt"):
        return False
    with open("used_images.txt", "r", encoding="utf-8") as file:
        used_images = file.read().splitlines()
    return image_url in used_images


# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
def mark_image_as_used(image_url):
    with open("used_images.txt", "a", encoding="utf-8") as file:
        file.write(image_url + "\n")


# --- –§–∏–ª—å—Ç—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π ---
def is_interesting(news):
    keywords = [
        "ai", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "gpu", "—Ä–µ–Ω–¥–µ—Ä", "unity", "blender", "python",
        "c++", "3d", "game", "code", "open source", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "design"
    ]
    content = (news["title"] + news["summary"]).lower()
    return any(keyword in content for keyword in keywords)


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ ---
def get_random_news():
    for _ in range(10):  # –ü–æ–ø—ã—Ç–∫–∏ –Ω–∞–π—Ç–∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
        feed_url = random.choice(RSS_FEEDS)
        feed = feedparser.parse(feed_url)
        entries = [
            entry for entry in feed.entries if entry.title and entry.summary
        ]
        random.shuffle(entries)

        for entry in entries:
            news = {
                "title": entry.title,
                "summary": entry.summary,
                "link": entry.link
            }
            if not is_posted(news["link"]) and is_interesting(news):
                return news
    return None


# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–±–µ–∑ "—Ñ–∞–∫—Ç 1", "—Ñ–∞–∫—Ç 2") ---
def stylize_post(news):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = f"""
–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –ø–æ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º —Å —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–º–µ—Ç–∫–æ–π (HTML-—Å—Ç–∏–ª—å).

–§–æ—Ä–º–∞—Ç:
üöÄ <b>[–ó–∞–≥–æ–ª–æ–≤–æ–∫]</b>  
üìÖ [–î–∞—Ç–∞] ¬∑ [–ò—Å—Ç–æ—á–Ω–∏–∫]  

üîπ <i>[–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∫—Ç]</i>  
üîπ <i>[–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]</i>  
üîπ <i>[–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è/–º–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞]</i>  

üìå [1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]  

#–¢—ç–≥ üëá –û–±—Å—É–∂–¥–∞–µ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!  
"""

    data = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [{
            "role": "user",
            "content": prompt
        }]
    }

    response = requests.post("https://openrouter.ai/api/v1/chat/completions",
                             json=data,
                             headers=headers)
    return response.json()['choices'][0]['message']['content']


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Unsplash (–∏—Å–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ) ---
def get_image_url(query):
    url = f"https://api.unsplash.com/search/photos?query={query}&client_id={UNSPLASH_ACCESS_KEY}"
    response = requests.get(url)
    data = response.json()

    if data.get('results'):
        for image in data['results']:
            image_url = image['urls']['regular']
            if not is_image_used(
                    image_url
            ):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
                mark_image_as_used(image_url)
                return image_url
    return None


# --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram ---
def post_with_image(text, image_url):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    payload = {
        "chat_id": CHANNEL_USERNAME,
        "photo": image_url,
        "caption": text,
        "parse_mode": "HTML"
    }
    requests.post(url, data=payload)


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    news = get_random_news()
    if news:
        print("üì∞ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å:", news["title"])
        post_text = stylize_post(news)
        print("‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç.")
        query = "3D modeling" if "3d" in news["summary"].lower(
        ) else "programming"
        image_url = get_image_url(query)
        print("üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–¥–æ–±—Ä–∞–Ω–∞.")
        if image_url:
            post_with_image(post_text, image_url)
            mark_as_posted(news["link"])
            print("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
        else:
            print("‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# --- –¶–∏–∫–ª –∑–∞–ø—É—Å–∫–∞ (–∫–∞–∂–¥—ã–µ 1 —á–∞—Å) ---
if __name__ == "__main__":
    main()
